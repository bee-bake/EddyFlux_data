summarise(frequency = n())
ggplot(gap_filled_countCO2, aes(x = frequency)) +
ylab("No of days")+
xlab("Half hours")+ ggtitle("Data availability after footprint and u star filter for CO2") +
geom_bar()
gap_filled_countCH4 <- gap_filled %>%
select(Date, NEE_uStar_orig) %>%
na.omit() %>%
group_by(Date) %>%
summarise(frequency = n())
ggplot(gap_filled_countCH4, aes(x = frequency)) +
ylab("No of days")+
xlab("Half hours")+ ggtitle("Data availability after footprint and u star filter for CH4") +
geom_bar()
p3/p4
#Import the data filtered for wind directions only
gap_unfilled <- read_csv("Eddy_fcr_footprint_full.csv")
#Split date and time
#gap_unfilled$Date <- as.Date(gap_filled$DateTime)
#gap_unfilled$Time <- format(as.POSIXct(gap_filled$DateTime), format = "%H:%M:%S")
#Count the number of half-hourly values each day
gap_unfilled_countCO2 <- gap_unfilled %>%
select(date, NEE.med) %>%
na.omit() %>%
group_by(date) %>%
summarise(frequency = n())
p1 <- ggplot(gap_unfilled_countCO2, aes(x = frequency)) +
ylab("No of days")+
xlab("Half hours")+ ggtitle("Data availability after footprint filter for CO2") +
geom_bar()
gap_unfilled_countCH4 <- gap_unfilled %>%
select(date, ch4.med) %>%
na.omit() %>%
group_by(date) %>%
summarise(frequency = n())
p2 <- ggplot(gap_unfilled_countCH4, aes(x = frequency)) +
ylab("No of days")+
xlab("Half hours")+ ggtitle("Data availability after footprint filter for CH4") +
geom_bar()
#Import the gap filled dataset but use columns that are not gap filled
gap_filled <- read_csv("2024-05-10_EC_processed_withBDScript.csv")
#Split date and time
gap_filled$Date <- as.Date(gap_filled$DateTime)
gap_filled$Time <- format(as.POSIXct(gap_filled$DateTime), format = "%H:%M:%S")
#Count the number of half-hourly values each day
gap_filled_countCO2 <- gap_filled %>%
select(Date, NEE) %>%
na.omit() %>%
group_by(Date) %>%
summarise(frequency = n())
p3 <- ggplot(gap_filled_countCO2, aes(x = frequency)) +
ylab("No of days")+
xlab("Half hours")+ ggtitle("Data availability after footprint and u star filter for CO2") +
geom_bar()
gap_filled_countCH4 <- gap_filled %>%
select(Date, ch4_flux) %>%
na.omit() %>%
group_by(Date) %>%
summarise(frequency = n())
p4 <- ggplot(gap_filled_countCH4, aes(x = frequency)) +
ylab("No of days")+
xlab("Half hours")+ ggtitle("Data availability after footprint and u star filter for CH4") +
geom_bar()
p1/p3
p2/p4
#Import the gap filled dataset but use columns that are not gap filled
gap_filled <- read_csv("2024-05-10_EC_processed_withBDScript.csv")
#Split date and time
gap_filled$Date <- as.Date(gap_filled$DateTime)
gap_filled$Time <- format(as.POSIXct(gap_filled$DateTime), format = "%H:%M:%S")
#Count the number of half-hourly values each day
gap_filled_countCO2 <- gap_filled %>%
select(Date, NEE_uStar_orig) %>%
na.omit() %>%
group_by(Date) %>%
summarise(frequency = n())
p3 <- ggplot(gap_filled_countCO2, aes(x = frequency)) +
ylab("No of days")+
xlab("Half hours")+ ggtitle("Data availability after footprint and u star filter for CO2") +
geom_bar()
gap_filled_countCH4 <- gap_filled %>%
select(Date, ch4_flux_uStar_orig) %>%
na.omit() %>%
group_by(Date) %>%
summarise(frequency = n())
p4 <- ggplot(gap_filled_countCH4, aes(x = frequency)) +
ylab("No of days")+
xlab("Half hours")+ ggtitle("Data availability after footprint and u star filter for CH4") +
geom_bar()
p1/p3
p2/p4
View(gap_filled_countCO2)
View(gap_filled_countCO2)
gap_filled_data_lossCO2 <- gap_filled_countCO2 %>%
filter(frequency >= 30)
View(gap_filled_data_lossCO2)
#Calculate the proportion of data represented by available half hourly values
data_loss_CO2 <- gap_filled_countCO2 %>%
group_by(frequency) %>%
summarise(no_days = n())
View(data_loss_CO2)
sum(data_loss_CO2$no_days)
View(data_loss_CO2)
#Calculate the proportion of data represented by available half hourly values
data_loss_CO2 <- gap_filled_countCO2 %>%
group_by(frequency) %>%
summarise(no_days = n()) %>%
mutate(proportion = (no_days/(sum(no_days))))
data_loss_CO2$cum_proportion[i] <- data_loss_CO2$proportion[i-1] data_loss_CO2$proportion[i]
data_loss_CO2$cum_proportion[i] <- data_loss_CO2$proportion[i-1] + data_loss_CO2$proportion[i]
#Since some frequency values are missing, create a tibble with complete series
z = 1:48
complete_hh_series <- tibble(hh = rep(z, times = 1), no_days = as.double(NA), samp_mean = as.double(NA))
View(complete_hh_series)
complete_hh_series <- tibble(hh = rep(z, times = 1))
complete_hh_series <- tibble(frequency = rep(z, times = 1))
merge(complete_hh_series, data_loss_CO2, by = "frequency")
merge(complete_hh_series, data_loss_CO2, by = "frequency", all = TRUE)
#Since some frequency values are missing, create a tibble with complete series
z = 1:48
complete_hh_blank <- tibble(frequency = rep(z, times = 1))
complete_hh_series <- merge(complete_hh_blank, data_loss_CO2, by = "frequency", all = TRUE)
complete_hh_series[is.na(complete_hh_series)] <- 0
data_loss_CO2$cum_proportion[1] <- data_loss_CO2$proportion[1]
complete_hh_series$cum_proportion[1] <- complete_hh_series$proportion[1]
complete_hh_series$cum_proportion[i] <- complete_hh_series$proportion[i-1] + complete_hh_series$proportion[i]
complete_hh_series$cum_proportion[i] = complete_hh_series$proportion[i-1] + complete_hh_series$proportion[i]
for (i in 2:length(complete_hh_series$frequency)) {
complete_hh_series$cum_proportion[i] = complete_hh_series$proportion[i-1] + complete_hh_series$proportion[i]
}
for (i in 2:length(complete_hh_series$frequency)) {
complete_hh_series$cum_proportion[i] = (complete_hh_series$proportion[i-1] + complete_hh_series$proportion[i])
}
#Calculate the proportion of data represented by available half hourly values
data_loss_CO2 <- gap_filled_countCO2 %>%
group_by(frequency) %>%
summarise(no_days = n()) %>%
mutate(proportion = (no_days/(sum(no_days))))
#Since some frequency values are missing, create a tibble with complete series
z = 1:48
complete_hh_blank <- tibble(frequency = rep(z, times = 1))
complete_hh_series <- merge(complete_hh_blank, data_loss_CO2, by = "frequency", all = TRUE)
complete_hh_series[is.na(complete_hh_series)] <- 0
complete_hh_series$cum_proportion[1] <- complete_hh_series$proportion[1]
for (i in 2:length(complete_hh_series$frequency)) {
complete_hh_series$cum_proportion[i] = (complete_hh_series$proportion[i-1] + complete_hh_series$proportion[i])
}
View(complete_hh_series)
#Calculate the proportion of data represented by available half hourly values
data_loss_CO2 <- gap_filled_countCO2 %>%
group_by(frequency) %>%
summarise(no_days = n()) %>%
mutate(proportion = (no_days/(sum(no_days))))
#Since some frequency values are missing, create a tibble with complete series
z = 1:48
complete_hh_blank <- tibble(frequency = rep(z, times = 1))
complete_hh_series <- merge(complete_hh_blank, data_loss_CO2, by = "frequency", all = TRUE)
complete_hh_series[is.na(complete_hh_series)] <- 0
complete_hh_series$cum_proportion[1] <- complete_hh_series$proportion[1]
for (i in 2:length(complete_hh_series$frequency)) {
complete_hh_series$cum_proportion[i] = (complete_hh_series$proportion[i+1] + complete_hh_series$proportion[i])
}
sum(complete_hh_series$proportion)
#Calculate the proportion of data represented by available half hourly values
data_loss_CO2 <- gap_filled_countCO2 %>%
group_by(frequency) %>%
summarise(no_days = n()) %>%
mutate(proportion = (no_days/(sum(no_days))))
#Since some frequency values are missing, create a tibble with complete series
z = 1:48
complete_hh_blank <- tibble(frequency = rep(z, times = 1))
complete_hh_series <- merge(complete_hh_blank, data_loss_CO2, by = "frequency", all = TRUE)
complete_hh_series[is.na(complete_hh_series)] <- 0
complete_hh_series$cum_proportion[1] <- complete_hh_series$proportion[1]
for (i in 2:length(complete_hh_series$frequency)) {
complete_hh_series$cum_proportion[i] = (complete_hh_series$proportion[i-1] + complete_hh_series$proportion[i])
}
#Since some frequency values are missing, create a tibble with complete series
z = 48:1
complete_hh_blank <- tibble(frequency = rep(z, times = 1))
complete_hh_series <- merge(complete_hh_blank, data_loss_CO2, by = "frequency", all = TRUE)
complete_hh_series[is.na(complete_hh_series)] <- 0
complete_hh_series$cum_proportion[1] <- complete_hh_series$proportion[1]
for (i in 2:length(complete_hh_series$frequency)) {
complete_hh_series$cum_proportion[i] = (complete_hh_series$proportion[i-1] + complete_hh_series$proportion[i])
}
for (i in 2:length(complete_hh_series$frequency)) {
complete_hh_series$cum_proportion[i] = (complete_hh_series$cum_proportion[i-1] + complete_hh_series$proportion[i])
}
#Calculate the proportion of data represented by available half hourly values
data_loss_CO2 <- gap_filled_countCO2 %>%
group_by(frequency) %>%
summarise(no_days = n()) %>%
mutate(proportion = (no_days/(sum(no_days))))
#Since some frequency values are missing, create a tibble with complete series
z = 1:48
complete_hh_blank <- tibble(frequency = rep(z, times = 1))
complete_hh_series <- merge(complete_hh_blank, data_loss_CO2, by = "frequency", all = TRUE)
complete_hh_series[is.na(complete_hh_series)] <- 0
complete_hh_series$cum_proportion[1] <- complete_hh_series$proportion[1]
for (i in 2:length(complete_hh_series$frequency)) {
complete_hh_series$cum_proportion[i] = (complete_hh_series$cum_proportion[i-1] + complete_hh_series$proportion[i])
}
#Plot the line graph
ggplot(complete_hh_series, aes(x = frequency, y = cum_proportion)) +
ylab("Proportion of the data available")+
xlab("Half hours")+ ggtitle("Data availability after footprint and u star filter for CH4") +
geom_line()
#Plot the line graph
ggplot(complete_hh_series, aes(x = frequency, y = cum_proportion)) +
ylab("Proportion")+
xlab("Half hours")+ ggtitle("Data availability after footprint and u star filter for CH4 with cut-off at 30") +
geom_line()
abline(v = 30, col = "red", lty = 2, lwd = 2)
#Plot the line graph
ggplot(complete_hh_series, aes(x = frequency, y = cum_proportion)) +
ylab("Proportion")+
xlab("Half hours")+ ggtitle("Data availability after footprint and u star filter for CH4 with cut-off at 30") +
geom_line() +
abline(v = 30, col = "red", lty = 2, lwd = 2)
#Plot the line graph
ggplot(complete_hh_series, aes(x = frequency, y = cum_proportion)) +
ylab("Proportion")+
xlab("Half hours")+ ggtitle("Data availability after footprint and u star filter for CH4 with cut-off at 30") +
geom_line()
#Plot the line graph
ggplot(complete_hh_series, aes(x = frequency, y = cum_proportion)) +
ylab("Proportion")+
xlab("Half hours")+ ggtitle("Data availability after footprint and u star filter for CH4 with cut-off at 30") +
geom_line() + geom_abline(v = 30, col = "red", lty = 2, lwd = 2)
#Plot the line graph
ggplot(complete_hh_series, aes(x = frequency, y = cum_proportion)) +
ylab("Proportion")+
xlab("Half hours")+ ggtitle("Data availability after footprint and u star filter for CH4 with cut-off at 30") +
geom_line() + geom_abline(v = 30, col = "red", lty = 2, lwd = 1)
#Plot the line graph
ggplot(complete_hh_series, aes(x = frequency, y = cum_proportion)) +
ylab("Proportion")+
xlab("Half hours")+ ggtitle("Data availability after footprint and u star filter for CH4 with cut-off at 30") +
geom_line() + geom_abline(intercept = 30, col = "red", lty = 2, lwd = 1)
#Plot the line graph
ggplot(complete_hh_series, aes(x = frequency, y = cum_proportion)) +
ylab("Proportion")+
xlab("Half hours")+ ggtitle("Data availability after footprint and u star filter for CH4 with cut-off at 30") +
geom_line() + geom_abline(intercept = 0.9, col = "red", lty = 2, lwd = 1)
#Plot the line graph
ggplot(complete_hh_series, aes(x = frequency, y = cum_proportion)) +
ylab("Proportion")+
xlab("Half hours")+ ggtitle("Data availability after footprint and u star filter for CH4 with cut-off at 30") +
geom_line() + geom_abline(intercept = 30, col = "red", lty = 2, lwd = 1)
#Plot the line graph
ggplot(complete_hh_series, aes(x = frequency, y = cum_proportion)) +
ylab("Proportion")+
xlab("Half hours")+ ggtitle("Data availability after footprint and u star filter for CH4 with cut-off at 30") +
geom_line() + geom_abline(intercept = 2, col = "red", lty = 2, lwd = 1)
#Plot the line graph
ggplot(complete_hh_series, aes(x = frequency, y = cum_proportion)) +
ylab("Proportion")+
xlab("Half hours")+ ggtitle("Data availability after footprint and u star filter for CH4 with cut-off at 30") +
geom_line() + geom_hline(xintercept=20, col = "red", lty = 2, lwd = 1)
#Plot the line graph
ggplot(complete_hh_series, aes(x = frequency, y = cum_proportion)) +
ylab("Proportion")+
xlab("Half hours")+ ggtitle("Data availability after footprint and u star filter for CH4 with cut-off at 30") +
geom_line() + geom_hline(yintercept=0.9, col = "red", lty = 2, lwd = 1)
#Plot the line graph
ggplot(complete_hh_series, aes(x = frequency, y = cum_proportion)) +
ylab("Proportion")+
xlab("Half hours")+ ggtitle("Data availability after footprint and u star filter for CH4 with cut-off at 30") +
geom_line() + geom_vline(xintercept=0.9, col = "red", lty = 2, lwd = 1)
#Plot the line graph
ggplot(complete_hh_series, aes(x = frequency, y = cum_proportion)) +
ylab("Proportion")+
xlab("Half hours")+ ggtitle("Data availability after footprint and u star filter for CH4 with cut-off at 30") +
geom_line() + geom_vline(xintercept=30, col = "red", lty = 2, lwd = 1)
#Plot the line graph
ggplot(complete_hh_series, aes(x = frequency, y = cum_proportion)) +
ylab("Proportion")+
xlab("Half hours")+ ggtitle("Data availability after footprint and u star filter for CH4 with cut-off at 30") +
geom_line() + geom_vline(xintercept=30, col = "red", lty = 2, lwd = 1) +
geom_hline(yintercept=0.95, col = "red", lty = 2, lwd = 1)
#Plot the line graph
ggplot(complete_hh_series, aes(x = frequency, y = cum_proportion)) +
ylab("Proportion")+
xlab("Half hours")+ ggtitle("Data availability after footprint and u star filter for CH4 with cut-off at 30") +
geom_line() + geom_vline(xintercept=30, col = "red", lty = 2, lwd = 1) +
geom_hline(yintercept=0.96, col = "red", lty = 2, lwd = 1)
#Plot the line graph
ggplot(complete_hh_series, aes(x = frequency, y = cum_proportion)) +
ylab("Proportion")+
xlab("Half hours")+ ggtitle("Data availability after footprint and u star filter for CH4 with cut-off at 30") +
geom_line() + geom_vline(xintercept=30, col = "red", lty = 2, lwd = 0.5) +
geom_hline(yintercept=0.96, col = "red", lty = 2, lwd = 0.5)
#Plot the line graph
ggplot(complete_hh_series, aes(x = frequency, y = cum_proportion)) +
ylab("Proportion")+
xlab("Half hours")+ ggtitle("Data availability after footprint and u star filter for CH4 with cut-off at 30") +
geom_line() + geom_vline(xintercept=30, col = "red", lty = 2, lwd = 0.7) +
geom_hline(yintercept=0.96, col = "red", lty = 2, lwd = 0.7)
#Calculate the proportion of data represented by available half hourly values
data_loss_CO2 <- gap_unfilled_countCO2 %>%
group_by(frequency) %>%
summarise(no_days = n()) %>%
mutate(proportion = (no_days/(sum(no_days))))
#Since some frequency values are missing, create a tibble with complete series
z = 1:48
complete_hh_blank <- tibble(frequency = rep(z, times = 1))
complete_hh_series <- merge(complete_hh_blank, data_loss_CO2, by = "frequency", all = TRUE)
complete_hh_series[is.na(complete_hh_series)] <- 0
complete_hh_series$cum_proportion[1] <- complete_hh_series$proportion[1]
#Calculate cumulative proportion of available data represented by each half hourly value
for (i in 2:length(complete_hh_series$frequency)) {
complete_hh_series$cum_proportion[i] = (complete_hh_series$cum_proportion[i-1] + complete_hh_series$proportion[i])
}
#Plot the line graph
ggplot(complete_hh_series, aes(x = frequency, y = cum_proportion)) +
ylab("Proportion")+
xlab("Half hours")+ ggtitle("Data availability after footprint and u star filter for CH4 with cut-off at 30") +
geom_line() + geom_vline(xintercept=30, col = "red", lty = 2, lwd = 0.7) +
geom_hline(yintercept=0.96, col = "red", lty = 2, lwd = 0.7)
#Plot the line graph
ggplot(complete_hh_series, aes(x = frequency, y = cum_proportion)) +
ylab("Proportion")+
xlab("Half hours")+ ggtitle("Data availability after footprint and u star filter for CH4 with cut-off at 30") +
geom_line() + geom_vline(xintercept=30, col = "red", lty = 2, lwd = 0.7) +
geom_hline(yintercept=0.9, col = "red", lty = 2, lwd = 0.7)
#Plot the line graph
ggplot(complete_hh_series, aes(x = frequency, y = cum_proportion)) +
ylab("Proportion")+
xlab("Half hours")+ ggtitle("Data availability after footprint and u star filter for CH4 with cut-off at 30") +
geom_line() + geom_vline(xintercept=30, col = "red", lty = 2, lwd = 0.7) +
geom_hline(yintercept=0.92, col = "red", lty = 2, lwd = 0.7)
#Calculate the proportion of data represented by available half hourly values
data_loss_CO2 <- gap_filled_countCO2 %>%
group_by(frequency) %>%
summarise(no_days = n()) %>%
mutate(proportion = (no_days/(sum(no_days))))
#Since some frequency values are missing, create a tibble with complete series
z = 1:48
complete_hh_blank <- tibble(frequency = rep(z, times = 1))
complete_hh_series <- merge(complete_hh_blank, data_loss_CO2, by = "frequency", all = TRUE)
complete_hh_series[is.na(complete_hh_series)] <- 0
complete_hh_series$cum_proportion[1] <- complete_hh_series$proportion[1]
#Calculate cumulative proportion of available data represented by each half hourly value
for (i in 2:length(complete_hh_series$frequency)) {
complete_hh_series$cum_proportion[i] = (complete_hh_series$cum_proportion[i-1] + complete_hh_series$proportion[i])
}
#Plot the line graph
ggplot(complete_hh_series, aes(x = frequency, y = cum_proportion)) +
ylab("Proportion")+
xlab("Half hours")+ ggtitle("Data availability after footprint and u star filter for CH4 with cut-off at 30") +
geom_line() + geom_vline(xintercept=30, col = "red", lty = 2, lwd = 0.7) +
geom_hline(yintercept=0.92, col = "red", lty = 2, lwd = 0.7)
#Plot the line graph
ggplot(complete_hh_series, aes(x = frequency, y = cum_proportion)) +
ylab("Proportion")+
xlab("Half hours")+ ggtitle("Data availability after footprint and u star filter for CH4 with cut-off at 30") +
geom_line() + geom_vline(xintercept=30, col = "red", lty = 2, lwd = 0.7) +
geom_hline(yintercept=0.96, col = "red", lty = 2, lwd = 0.7)
#Plot the line graph
ggplot(complete_hh_series, aes(x = frequency, y = cum_proportion)) +
ylab("Proportion")+
xlab("Half hours")+ ggtitle("Data availability after footprint filter for CO2 with cut-off at 30") +
geom_line() + geom_vline(xintercept=30, col = "red", lty = 2, lwd = 0.7) +
geom_hline(yintercept=0.92, col = "red", lty = 2, lwd = 0.7)
#Calculate the proportion of data represented by available half hourly values
data_loss_CO2 <- gap_unfilled_countCO2 %>%
group_by(frequency) %>%
summarise(no_days = n()) %>%
mutate(proportion = (no_days/(sum(no_days))))
#Since some frequency values are missing, create a tibble with complete series
z = 1:48
complete_hh_blank <- tibble(frequency = rep(z, times = 1))
complete_hh_series <- merge(complete_hh_blank, data_loss_CO2, by = "frequency", all = TRUE)
complete_hh_series[is.na(complete_hh_series)] <- 0
complete_hh_series$cum_proportion[1] <- complete_hh_series$proportion[1]
#Calculate cumulative proportion of available data represented by each half hourly value
for (i in 2:length(complete_hh_series$frequency)) {
complete_hh_series$cum_proportion[i] = (complete_hh_series$cum_proportion[i-1] + complete_hh_series$proportion[i])
}
#Plot the line graph
ggplot(complete_hh_series, aes(x = frequency, y = cum_proportion)) +
ylab("Proportion")+
xlab("Half hours")+ ggtitle("Data availability after footprint filter for CO2 with cut-off at 30") +
geom_line() + geom_vline(xintercept=30, col = "red", lty = 2, lwd = 0.7) +
geom_hline(yintercept=0.92, col = "red", lty = 2, lwd = 0.7)
#Calculate the proportion of data represented by available half hourly values
data_loss_CO2 <- gap_filled_countCO2 %>%
group_by(frequency) %>%
summarise(no_days = n()) %>%
mutate(proportion = (no_days/(sum(no_days))))
#Since some frequency values are missing, create a tibble with complete series
z = 1:48
complete_hh_blank <- tibble(frequency = rep(z, times = 1))
complete_hh_series <- merge(complete_hh_blank, data_loss_CO2, by = "frequency", all = TRUE)
complete_hh_series[is.na(complete_hh_series)] <- 0
complete_hh_series$cum_proportion[1] <- complete_hh_series$proportion[1]
#Calculate cumulative proportion of available data represented by each half hourly value
for (i in 2:length(complete_hh_series$frequency)) {
complete_hh_series$cum_proportion[i] = (complete_hh_series$cum_proportion[i-1] + complete_hh_series$proportion[i])
}
#Plot the line graph
ggplot(complete_hh_series, aes(x = frequency, y = cum_proportion)) +
ylab("Proportion")+
xlab("Half hours")+ ggtitle("Data availability after footprint and u star filter for CH4 with cut-off at 30") +
geom_line() + geom_vline(xintercept=30, col = "red", lty = 2, lwd = 0.7) +
geom_hline(yintercept=0.96, col = "red", lty = 2, lwd = 0.7)
#Calculate the proportion of data represented by available half hourly values
data_loss_CO2 <- gap_filled_countCO2 %>%
group_by(frequency) %>%
summarise(no_days = n()) %>%
mutate(proportion = (no_days/(sum(no_days))))
#Since some frequency values are missing, create a tibble with complete series
z = 1:48
complete_hh_blank <- tibble(frequency = rep(z, times = 1))
complete_hh_series <- merge(complete_hh_blank, data_loss_CO2, by = "frequency", all = TRUE)
complete_hh_series[is.na(complete_hh_series)] <- 0
complete_hh_series$cum_proportion[1] <- complete_hh_series$proportion[1]
#Calculate cumulative proportion of available data represented by each half hourly value
for (i in 2:length(complete_hh_series$frequency)) {
complete_hh_series$cum_proportion[i] = (complete_hh_series$cum_proportion[i-1] + complete_hh_series$proportion[i])
}
#Plot the line graph
ggplot(complete_hh_series, aes(x = frequency, y = cum_proportion)) +
ylab("Proportion")+
xlab("Half hours")+ ggtitle("Data availability after footprint and u star filter for CO2 with cut-off at 30") +
geom_line() + geom_vline(xintercept=30, col = "red", lty = 2, lwd = 0.7) +
geom_hline(yintercept=0.96, col = "red", lty = 2, lwd = 0.7)
#Calculate the proportion of data represented by available half hourly values
data_loss_CO2 <- gap_unfilled_countCH4 %>%
group_by(frequency) %>%
summarise(no_days = n()) %>%
mutate(proportion = (no_days/(sum(no_days))))
#Since some frequency values are missing, create a tibble with complete series
z = 1:48
complete_hh_blank <- tibble(frequency = rep(z, times = 1))
complete_hh_series <- merge(complete_hh_blank, data_loss_CO2, by = "frequency", all = TRUE)
complete_hh_series[is.na(complete_hh_series)] <- 0
complete_hh_series$cum_proportion[1] <- complete_hh_series$proportion[1]
#Calculate cumulative proportion of available data represented by each half hourly value
for (i in 2:length(complete_hh_series$frequency)) {
complete_hh_series$cum_proportion[i] = (complete_hh_series$cum_proportion[i-1] + complete_hh_series$proportion[i])
}
#Plot the line graph
ggplot(complete_hh_series, aes(x = frequency, y = cum_proportion)) +
ylab("Proportion")+
xlab("Half hours")+ ggtitle("Data availability after footprint filter for CO2 with cut-off at 30") +
geom_line() + geom_vline(xintercept=30, col = "red", lty = 2, lwd = 0.7) +
geom_hline(yintercept=0.92, col = "red", lty = 2, lwd = 0.7)
#Calculate the proportion of data represented by available half hourly values
data_loss_CO2 <- gap_filled_countCH4 %>%
group_by(frequency) %>%
summarise(no_days = n()) %>%
mutate(proportion = (no_days/(sum(no_days))))
#Since some frequency values are missing, create a tibble with complete series
z = 1:48
complete_hh_blank <- tibble(frequency = rep(z, times = 1))
complete_hh_series <- merge(complete_hh_blank, data_loss_CO2, by = "frequency", all = TRUE)
complete_hh_series[is.na(complete_hh_series)] <- 0
complete_hh_series$cum_proportion[1] <- complete_hh_series$proportion[1]
#Calculate cumulative proportion of available data represented by each half hourly value
for (i in 2:length(complete_hh_series$frequency)) {
complete_hh_series$cum_proportion[i] = (complete_hh_series$cum_proportion[i-1] + complete_hh_series$proportion[i])
}
#Plot the line graph
ggplot(complete_hh_series, aes(x = frequency, y = cum_proportion)) +
ylab("Proportion")+
xlab("Half hours")+ ggtitle("Data availability after footprint and u star filter for CO2 with cut-off at 30") +
geom_line() + geom_vline(xintercept=30, col = "red", lty = 2, lwd = 0.7) +
geom_hline(yintercept=0.96, col = "red", lty = 2, lwd = 0.7)
#Calculate the proportion of data represented by available half hourly values
data_loss_CO2 <- gap_unfilled_countCO2 %>%
group_by(frequency) %>%
summarise(no_days = n()) %>%
mutate(proportion = (no_days/(sum(no_days))))
#Since some frequency values are missing, create a tibble with complete series
z = 1:48
complete_hh_blank <- tibble(frequency = rep(z, times = 1))
complete_hh_series <- merge(complete_hh_blank, data_loss_CO2, by = "frequency", all = TRUE)
complete_hh_series[is.na(complete_hh_series)] <- 0
complete_hh_series$cum_proportion[1] <- complete_hh_series$proportion[1]
#Calculate cumulative proportion of available data represented by each half hourly value
for (i in 2:length(complete_hh_series$frequency)) {
complete_hh_series$cum_proportion[i] = (complete_hh_series$cum_proportion[i-1] + complete_hh_series$proportion[i])
}
#Plot the line graph
ggplot(complete_hh_series, aes(x = frequency, y = cum_proportion)) +
ylab("Proportion")+
xlab("Half hours")+ ggtitle("Data availability after footprint filter for CO2 with cut-off at 30") +
geom_line() + geom_vline(xintercept=30, col = "red", lty = 2, lwd = 0.7) +
geom_hline(yintercept=0.92, col = "red", lty = 2, lwd = 0.7)
#Calculate the proportion of data represented by available half hourly values
data_loss_CO2 <- gap_filled_countCO2 %>%
group_by(frequency) %>%
summarise(no_days = n()) %>%
mutate(proportion = (no_days/(sum(no_days))))
#Since some frequency values are missing, create a tibble with complete series
z = 1:48
complete_hh_blank <- tibble(frequency = rep(z, times = 1))
complete_hh_series <- merge(complete_hh_blank, data_loss_CO2, by = "frequency", all = TRUE)
complete_hh_series[is.na(complete_hh_series)] <- 0
complete_hh_series$cum_proportion[1] <- complete_hh_series$proportion[1]
#Calculate cumulative proportion of available data represented by each half hourly value
for (i in 2:length(complete_hh_series$frequency)) {
complete_hh_series$cum_proportion[i] = (complete_hh_series$cum_proportion[i-1] + complete_hh_series$proportion[i])
}
#Plot the line graph
ggplot(complete_hh_series, aes(x = frequency, y = cum_proportion)) +
ylab("Proportion")+
xlab("Half hours")+ ggtitle("Data availability after footprint and u star filter for CO2 with cut-off at 30") +
geom_line() + geom_vline(xintercept=30, col = "red", lty = 2, lwd = 0.7) +
geom_hline(yintercept=0.96, col = "red", lty = 2, lwd = 0.7)
