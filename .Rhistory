pivot_longer(cols=c(co2flux_umolm2s_mean, ch4flux_umolm2s_mean), # make the wide data frame into a long one so each observation has a depth
names_to='variable',
values_to='observation')
#Count the number of half hourly values and apply the cut-off
flux_count <- eddy_fcr %>%
filter(footprint_flag == 0)%>% # filter out so it is the smallest footprint
select(date, CO2_med_flux, ch4_med_flux)%>%
dplyr::rename(co2flux_umolm2s_mean = CO2_med_flux,
ch4flux_umolm2s_mean = ch4_med_flux) %>%# rename columns
pivot_longer(cols = starts_with(c("co2flux_umolm2s_mean", "ch4flux_umolm2s_mean")),
names_to = "variable", values_to = "mean_flux")%>%
na.omit(mean_flux) %>%
group_by(date, variable)%>%
summarise(non_na_count = sum(!is.na(mean_flux))) %>% #count hh values and filter >=24 only
filter(non_na_count >= 24) %>%
ungroup() %>%
select(-non_na_count)
#Select rows from targets_df that are present in flux_count dataframe
targets_df <- targets_df[interaction(targets_df[c("date", "variable")]) %in% interaction(flux_count),]%>%
drop_na(date)%>% # drop when we have timezone issues with daylight savings
mutate(datetime=(paste0(date," ","00:00:00")))%>%
mutate(Reservoir='fcre')%>% # change the name to the the reservoir code for FLARE
mutate(Depth_m = NA)%>%
select(-date)%>%
rename(site_id=Reservoir, # rename the columns for standard notation
depth=Depth_m)%>%
select(c('datetime', 'site_id', 'depth', "observation", 'variable')) # rearrange order of columns
View(targets_df)
#As interaction function above misses CO2/CH4 if not available, thus adding those rows with NaNs
targets_df <- targets_df %>%
group_by(datetime) %>% #split by column values and add equivalent number of rows
mutate(duplicate = n())
targets_df <- rbind(targets_df,
targets_df %>% filter(duplicate == 1) %>%
mutate(duplicate = 2, observation = NaN,
variable = ifelse(variable == "co2flux_umolm2s_mean", "ch4flux_umolm2s_mean", "co2flux_umolm2s_mean"))) %>%
select(-duplicate) %>%
dplyr::arrange(datetime)
View(targets_df)
View(targets_df2)
##########################################################################
#This part uses half hourly values with all QAQC and cut-off but without u* filtering
#Use a predefined function to import the data
source("generate_EddyFLux_ghg_targets_function_with_cutoff_Bibek.R")
targets_with_stable_mean <- generate_EddyFlux_ghg_targets_function(
flux_current_data_file <- "https://raw.githubusercontent.com/CareyLabVT/Reservoirs/master/Data/DataNotYetUploadedToEDI/EddyFlux_Processing/EddyPro_Cleaned_L1.csv",
flux_edi_data_file <- "https://pasta-s.lternet.edu/package/data/eml/edi/692/11/e0976e7a6543fada4cbf5a1bb168713b",
met_current_data_file <- "https://raw.githubusercontent.com/FLARE-forecast/FCRE-data/fcre-metstation-data-qaqc/FCRmet_L1.csv",
met_edi_data_file <- "https://pasta.lternet.edu/package/data/eml/edi/389/8/d4c74bbb3b86ea293e5c52136347fbb0")
View(targets_with_stable_mean)
#Create a csv file and save it!
write.csv(targets_with_stable_mean, "C:/Users/13188/Desktop/Data_repository/targets_with_stable_mean.csv")
#install.packages('pacman')
pacman::p_load("tidyverse","lubridate")
#generate_EddyFlux_ghg_targets_function <- function(flux_current_data_file,
# flux_edi_data_file,
# met_current_data_file,
# met_edi_data_file){
# Things to figure out is how many fluxes are needed for a good daily flux.
# Right now it is just a daily average no matter if it is one observation or 48
# functions we need for despike
source("https://raw.githubusercontent.com/CareyLabVT/Reservoirs/master/Data/DataNotYetUploadedToEDI/EddyFlux_Processing/despike.R")
flux_current_data_file <- "https://raw.githubusercontent.com/FLARE-forecast/FCRE-data/fcre-eddyflux-data-qaqc/EddyFlux_streaming_L1.csv"
flux_edi_data_file <- "https://pasta.lternet.edu/package/data/eml/edi/1061/3/e0976e7a6543fada4cbf5a1bb168713b"
met_current_data_file <- "https://raw.githubusercontent.com/FLARE-forecast/FCRE-data/fcre-metstation-data-qaqc/FCRmet_L1.csv"
met_edi_data_file <- "https://pasta.lternet.edu/package/data/eml/edi/389/8/d4c74bbb3b86ea293e5c52136347fbb0"
## Read in the data files
## read in EddyFlux summary files from the current data file which is found on GitHub
dt1 <-read_csv(flux_current_data_file)
# read in historical data file
# EDI
# read in the data file downloaded from EDI
dt2 <-read_csv(flux_edi_data_file)
# combine the historic and the current data file
ec <- dt2%>%
bind_rows(.,dt1)%>%
distinct()
# Format time
# make a datetime column and read in with original timezone
ec$datetime <- paste0(ec$date, " ",ec$time)
# Set timezone as America/New_York because that's what it is in and then convert to EST
ec$datetime <- force_tz(ymd_hms(ec$datetime), tzone = "America/New_York")
# convert from Eastern/US with daylight savings observed to EST which does not.
ec$datetime <- with_tz(ec$datetime, tzone = "EST")
#### Reading in data from the Met Station for QAQCing when raining
# Load data Meteorological data from EDI
# Read in Met file from EDI
met_all <- read_csv(met_edi_data_file,
col_select=c("DateTime","Rain_Total_mm"))%>%
mutate(DateTime = force_tz(DateTime, tzone="EST"))%>%
# Start timeseries on the 00:15:00 to facilitate 30-min averages
filter(DateTime >= ymd_hms("2020-04-04 00:15:00", tz="EST"))
# Bind files together if need to use current file
met_curr <- read_csv(met_current_data_file,
col_select=c("DateTime","Rain_Total_mm"))%>%
mutate(DateTime = force_tz(DateTime, tzone="EST"))
met_all <- dplyr::bind_rows(met_curr, met_all) # bind everything together
# Start timeseries on the 00:15:00 to facilitate 30-min averages
# Select data every 30 minutes from Jan 2020 to end of met data
met_all$Breaks <- cut(met_all$DateTime,breaks = "30 mins",right=FALSE)
met_all$Breaks <- parse_date_time(met_all$Breaks, orders=c("ymd", "ymd HMS"), tz="EST")
# Sum met data to the 30 min mark (for Total Rain and Total PAR)
met_2 <- met_all %>%
select(DateTime,Rain_Total_mm,Breaks) %>%
group_by(Breaks) %>%
summarise_if(is.numeric,sum,na.rm=TRUE) %>%
ungroup()%>%
mutate(DateTime=Breaks - 900)%>%
rename(datetime = DateTime,
Rain_sum = Rain_Total_mm)
ec2 <- left_join(ec, met_2, by='datetime')
# convert time to UTC
ec2 <- ec2 |>
dplyr::mutate(datetime_utc = with_tz(datetime, tz = 'UTC'),
date = as.Date(datetime_utc))
# Filter out wind directions that are BEHIND the catwalk
# I.e., only keep data that is IN FRONT of the catwalk for both EC and Met data
ec_filt <- ec2 %>% dplyr::filter(wind_dir < 80 | wind_dir > 250)
# Remove values that are greater than abs(100)
# NOTE: Updated from Brenda's code to use abs(100); instead of -70 to 100 filtering
# Waldo et al. 2021 used: values greater than abs(15000)
ec_filt$co2_flux_umolm2s <- ifelse(ec_filt$co2_flux_umolm2s > 100 | ec_filt$co2_flux_umolm2s < -100, NA, ec_filt$co2_flux_umolm2s)
# Remove CO2 data if QC >= 2 (aka: data that has been flagged by Eddy Pro)
ec_filt$co2_flux_umolm2s <- ifelse(ec_filt$qc_co2_flux >= 2, NA, ec_filt$co2_flux_umolm2s)
# Additionally remove CO2 data when H and LE > 2 (following CH4 filtering)
ec_filt$co2_flux_umolm2s <- ifelse(ec_filt$qc_co2_flux==1 & ec_filt$qc_LE>=2, NA, ec_filt$co2_flux_umolm2s)
ec_filt$co2_flux_umolm2s <- ifelse(ec_filt$qc_co2_flux==1 & ec_filt$qc_H>=2, NA, ec_filt$co2_flux_umolm2s)
# Remove large CH4 values
# Remove values that are greater than abs(0.25)
# NOTE: Updated from Brenda's code to use abs(0.25)
# Waldo et al. 2021 used: values greater than abs(500)
ec_filt$ch4_flux_umolm2s <- ifelse(ec_filt$ch4_flux_umolm2s >= 0.25 | ec_filt$ch4_flux_umolm2s <= -0.25, NA, ec_filt$ch4_flux_umolm2s)
# Remove ch4 values when signal strength < 20
ec_filt$ch4_flux_umolm2s <- ifelse(ec_filt$rssi_77_mean < 20, NA, ec_filt$ch4_flux_umolm2s)
# Remove CH4 data if QC >= 2
ec_filt$ch4_flux_umolm2s <- ifelse(ec_filt$qc_ch4_flux >=2, NA, ec_filt$ch4_flux_umolm2s)
# Additionally, remove CH4 when other parameters are QA/QC'd
# Following Waldo et al. 2021: Remove additional ch4 flux data
# (aka: anytime ch4_qc flag = 1 & another qc_flag =2, remove)
ec_filt$ch4_flux_umolm2s <- ifelse(ec_filt$qc_ch4_flux==1 & ec_filt$qc_co2_flux>=2, NA, ec_filt$ch4_flux_umolm2s)
ec_filt$ch4_flux_umolm2s <- ifelse(ec_filt$qc_ch4_flux==1 & ec_filt$qc_LE>=2, NA, ec_filt$ch4_flux_umolm2s)
ec_filt$ch4_flux_umolm2s <- ifelse(ec_filt$qc_ch4_flux==1 & ec_filt$qc_H>=2, NA, ec_filt$ch4_flux_umolm2s)
# Check QC for H and LE
# Removing qc >= 2 for H and LE
ec_filt$H_wm2 <- ifelse(ec_filt$qc_H >= 2, NA, ec_filt$H_wm2)
ec_filt$LE_wm2 <- ifelse(ec_filt$qc_LE >= 2, NA, ec_filt$LE_wm2)
# Remove high H values: greater than abs(200)
# NOTE: Updated to have same upper and lower magnitude bound
# Waldo et al. 2021 used abs of 200 for H
ec_filt$H_wm2 <- ifelse(ec_filt$H_wm2 >= 200 | ec_filt$H_wm2 <= -200, NA, ec_filt$H_wm2)
# Remove high LE values: greater than abs(500)
# NOTE: Updated to have same upper and lower magnitude bounds
# Waldo et al. 2021 used abs of 1000 for LE
ec_filt$LE_wm2 <- ifelse(ec_filt$LE_wm2 >= 500 | ec_filt$LE_wm2 <= -500, NA, ec_filt$LE_wm2)
# Remove CH4 when it rains
ec_filt$ch4_flux_umolm2s <- ifelse(ec_filt$Rain_sum > 0, NA, ec_filt$ch4_flux_umolm2s)
# Remove CH4 data when thermocouple was not working (apr 05 - apr 25) # ABP find for 2023
ec_filt$ch4_flux_umolm2s <- ifelse(ec_filt$datetime >= '2021-04-05' & ec_filt$datetime <= '2021-04-25',
NA, ec_filt$ch4_flux_umolm2s)
eddy_fcr <- ec_filt
# Despike NEE (CO2 flux) and CH4. Use the function sourced at the beginning of the script
# Calculate low, medium, and high data flags
flag <- spike_flag(eddy_fcr$co2_flux_umolm2s,z = 7)
NEE_low <- ifelse(flag == 1, NA, eddy_fcr$co2_flux_umolm2s)
flag <- spike_flag(eddy_fcr$co2_flux_umolm2s,z = 5.5)
NEE_medium <- ifelse(flag == 1, NA, eddy_fcr$co2_flux_umolm2s)
flag <- spike_flag(eddy_fcr$co2_flux_umolm2s,z = 4)
NEE_high <- ifelse(flag == 1, NA, eddy_fcr$co2_flux_umolm2s)
# Combine all flagged data into the data frame but only keep medium one
eddy_fcr$CO2_med_flux <- NEE_medium
#Despike CH4 flux
flag <- spike_flag(eddy_fcr$ch4_flux_umolm2s,z = 7)
CH4_low <- ifelse(flag == 1, NA, eddy_fcr$ch4_flux_umolm2s)
flag <- spike_flag(eddy_fcr$ch4_flux_umolm2s,z = 5.5)
CH4_medium <- ifelse(flag == 1, NA, eddy_fcr$ch4_flux_umolm2s)
flag <- spike_flag(eddy_fcr$ch4_flux_umolm2s,z = 4)
CH4_high <- ifelse(flag == 1, NA, eddy_fcr$ch4_flux_umolm2s)
# Combine all flagged data into the data frame but only keep the medium one
eddy_fcr$ch4_med_flux <- CH4_medium
# Filter out all the values (x_peak) that are out of the reservoir
eddy_fcr$footprint_flag <- ifelse(eddy_fcr$wind_dir >= 15 & eddy_fcr$wind_dir <= 90 & eddy_fcr$x_peak_m >= 40, 1,
ifelse(eddy_fcr$wind_dir < 15 & eddy_fcr$wind_dir > 327 & eddy_fcr$x_peak_m > 120, 1,
ifelse(eddy_fcr$wind_dir < 302 & eddy_fcr$wind_dir >= 250 & eddy_fcr$x_peak_m > 50, 1, 0)))
# Remove flagged data
targets_df <- eddy_fcr %>%
filter(footprint_flag == 0)%>% # filter out so it is the smallest footprint
select(date, CO2_med_flux, ch4_med_flux)%>%
dplyr::rename(co2flux_umolm2s_mean = CO2_med_flux,
ch4flux_umolm2s_mean = ch4_med_flux) %>%# rename columns
# group_by(date) %>%
# summarise_if(is.numeric, mean, na.rm = TRUE) %>%
# ungroup()
pivot_longer(cols=c(co2flux_umolm2s_mean, ch4flux_umolm2s_mean), # make the wide data frame into a long one so each observation has a depth
names_to='variable',
values_to='observation')%>%
drop_na(observation) %>% # filters out fluxes that are NAs to get a better count of usable fluxes
group_by(date, variable)%>%
summarise(
count = n(),
observation= mean(observation, na.rm=TRUE)) %>%
ungroup()%>%
filter(count >= 24)
# write.csv(targets_df, "avg_flux_above_24.csv", row.names = F)
#Count the number of half hourly values and apply the cut-off
# flux_count <- eddy_fcr %>%
#   filter(footprint_flag == 0)%>% # filter out so it is the smallest footprint
#   select(date, CO2_med_flux, ch4_med_flux)%>%
#   dplyr::rename(co2flux_umolm2s_mean = CO2_med_flux,
#                 ch4flux_umolm2s_mean = ch4_med_flux) %>% # rename columns
#   group_by(date)%>% # average if there are more than one sample taken during that day
#   summarise(frequency = n()) %>% #count hh values and filter >=24 only
#   filter(frequency >= 24) %>%
#   ungroup()
targets_df2 <- targets_df %>%
#filter(date %in% flux_count$date) %>%
drop_na(date)%>% # drop when we have timezone issues with daylight savings
mutate(datetime=(paste0(date," ","00:00:00")))%>%
mutate(Reservoir='fcre')%>% # change the name to the the reservoir code for FLARE
mutate(Depth_m = NA)%>%
select(-date)%>%
rename(site_id=Reservoir, # rename the columns for standard notation
depth=Depth_m)%>%
# pivot_longer(cols=c(co2flux_umolm2s_mean, ch4flux_umolm2s_mean), # make the wide data frame into a long one so each observation has a depth
#              names_to='variable',
#              values_to='observation')%>%
select(c('datetime', 'site_id', 'depth', "observation", 'variable')) # rearrange order of columns
View(targets_df2)
View(targets_df2)
View(targets_with_stable_mean)
ggplot()+
geom_line(targets_df2, aes(x=datetime, y= observation, color=variable))+
geom_line(targets_with_stable_mean, aes(x=datetime, y= observation, color=variable))
ggplot()+
geom_line(data=targets_df2, aes(x=datetime, y= observation, color=variable))+
geom_line(data=targets_with_stable_mean, aes(x=datetime, y= observation, color=variable))
ggplot()+
geom_line(data=targets_df2, aes(x=datetime, y= observation, color=variable))+
geom_line(data=targets_with_stable_mean, aes(x=datetime, y= observation, color=variable))+
ylim(-5,5)
targets_df2 |> pivot_wider(names_from = variable, values_from = observation)
targets_with_stable_mean |>  pivot_wider(names_from = variable, values_from = observation)
targets_df2<- targets_df2 |> pivot_wider(names_from = variable, values_from = observation)
targets_with_stable_mean <- targets_with_stable_mean |>  pivot_wider(names_from = variable, values_from = observation)
ggplot()+
geom_line(data=targets_df2, aes(x=datetime, y= co2flux_umolm2s_mean), colour = "red")
ggplot()+
geom_point(targets_df2, aes(x=datetime, y= co2flux_umolm2s_mean), colour = "red")
ggplot()+
geom_point(data=targets_df2, aes(x=datetime, y= co2flux_umolm2s_mean), colour = "red")
ggplot()+
geom_point(data=targets_df2, aes(x=datetime, y= co2flux_umolm2s_mean), colour = "red")+
geom_point(data=targets_with_stable_mean, aes(x=datetime, y= co2flux_umolm2s_mean), colour = "blue")
ggplot()+
geom_point(data=targets_df2, aes(x=datetime, y= ch4flux_umolm2s_mean), colour = "red")+
geom_point(data=targets_with_stable_mean, aes(x=datetime, y= ch4flux_umolm2s_mean), colour = "blue")
ggplot()+
geom_point(data=targets_df2, aes(x=datetime, y= co2flux_umolm2s_mean), colour = "red")+
geom_point(data=targets_with_stable_mean, aes(x=datetime, y= co2flux_umolm2s_mean), colour = "blue")+
scale_x_date(date_breaks = "6 months", date_labels = "%Y-%m")
ggplot()+
geom_point(data=targets_df2, aes(x=datetime, y= co2flux_umolm2s_mean), colour = "red")+
geom_point(data=targets_with_stable_mean, aes(x=datetime, y= co2flux_umolm2s_mean), colour = "blue")+
ggbreak::scale_x_break(c(ymd("2020-04-01"), ymd("2024-05-30")))+
scale_x_date(date_breaks = "6 months", date_labels = "%Y-%m")
targets_df2$newdate <- strptime(as.character(targets_df2$dateTime), "%m/%d/%Y")
targets_df2$newdate <- strptime(as.character(targets_df2$datetime), "%m/%d/%Y")
targets_with_stable_mean$newdate <- strptime(as.character(targets_with_stable_mean$datetime), "%m/%d/%Y")
ggplot()+
geom_point(data=targets_df2, aes(x=newdate, y= co2flux_umolm2s_mean), colour = "red")+
geom_point(data=targets_with_stable_mean, aes(x=newdate, y= co2flux_umolm2s_mean), colour = "blue")+
ggbreak::scale_x_break(c(ymd("2020-04-01"), ymd("2024-05-30")))+
scale_x_date(date_breaks = "6 months", date_labels = "%Y-%m")
ggplot()+
geom_point(data=targets_df2, aes(x=datetime, y= co2flux_umolm2s_mean), colour = "red")+
geom_point(data=targets_with_stable_mean, aes(x=datetime, y= co2flux_umolm2s_mean), colour = "blue")+
ggbreak::scale_x_break(as.Date(c(ymd("2020-04-01"), ymd("2024-05-30"))))+
scale_x_date(date_breaks = "6 months", date_labels = "%Y-%m")
ggplot()+
geom_point(data=targets_df2, aes(x=newdate, y= co2flux_umolm2s_mean), colour = "red")+
geom_point(data=targets_with_stable_mean, aes(x=newdate, y= co2flux_umolm2s_mean), colour = "blue")+
ggbreak::scale_x_break(c(ymd("2020-04-01"), ymd("2024-05-30")))+
scale_x_date(date_breaks = "6 months", date_labels = "%Y-%m")
targets_df2$newdate <- strptime(as.character(targets_df2$datetime), "%Y-%m-%d")
targets_with_stable_mean$newdate <- strptime(as.character(targets_with_stable_mean$datetime), "%Y-%m-%d")
ggplot()+
geom_point(data=targets_df2, aes(x=newdate, y= co2flux_umolm2s_mean), colour = "red")+
geom_point(data=targets_with_stable_mean, aes(x=newdate, y= co2flux_umolm2s_mean), colour = "blue")+
ggbreak::scale_x_break(c(ymd("2020-04-01"), ymd("2024-05-30")))+
scale_x_date(date_breaks = "6 months", date_labels = "%Y-%m")
ggplot()+
geom_point(data=targets_df2, aes(x=newdate, y= co2flux_umolm2s_mean), colour = "red")+
geom_point(data=targets_with_stable_mean, aes(x=newdate, y= co2flux_umolm2s_mean), colour = "blue")+
#ggbreak::scale_x_break(c(ymd("2020-04-01"), ymd("2024-05-30")))+
scale_x_date(date_breaks = "6 months", date_labels = "%Y-%m")
ggplot()+
geom_point(data=targets_df2, aes(x=as.Date(newdate), y= co2flux_umolm2s_mean), colour = "red")+
geom_point(data=targets_with_stable_mean, aes(x=as.Date(newdate), y= co2flux_umolm2s_mean), colour = "blue")+
ggbreak::scale_x_break(c(ymd("2020-04-01"), ymd("2024-05-30")))+
scale_x_date(date_breaks = "6 months", date_labels = "%Y-%m")
ggplot()+
geom_point(data=targets_df2, aes(x=as.Date(newdate), y= co2flux_umolm2s_mean), colour = "red")+
geom_point(data=targets_with_stable_mean, aes(x=as.Date(newdate), y= co2flux_umolm2s_mean), colour = "blue")+
ggbreak::scale_x_break(c(ymd("2020-04-01"), ymd("2024-05-30")))+
scale_x_date(date_breaks = "6 months", date_labels = "%Y-%m")
ggplot()+
geom_point(data=targets_df2, aes(x=as.Date(newdate), y= co2flux_umolm2s_mean), colour = "red", na.rm = TRUE)+
geom_point(data=targets_with_stable_mean, aes(x=as.Date(newdate), y= co2flux_umolm2s_mean), colour = "blue", na.rm = TRUE)+
ggbreak::scale_x_break(c(ymd("2020-04-01"), ymd("2024-05-30")))+
scale_x_date(date_breaks = "6 months", date_labels = "%Y-%m")
ggplot()+
geom_point(data=targets_df2, aes(x=as.Date(newdate), y= co2flux_umolm2s_mean), colour = "red", na.rm = TRUE)+
geom_point(data=targets_with_stable_mean, aes(x=as.Date(newdate), y= co2flux_umolm2s_mean), colour = "blue", na.rm = TRUE)+
ggbreak::scale_x_break(c(ymd("2020-04-01"), ymd("2024-05-30")))+
scale_x_date(date_breaks = "6 months", date_labels = "%Y-%m")
targets_df2<- targets_df2 |> pivot_wider(names_from = variable, values_from = observation)
targets_with_stable_mean <- targets_with_stable_mean |>  pivot_wider(names_from = variable, values_from = observation)
ggplot()+
geom_point(data=targets_df2, aes(x=as.Date(newdate), y= co2flux_umolm2s_mean, na.rm = TRUE), colour = "red")+
geom_point(data=targets_with_stable_mean, aes(x=as.Date(newdate), y= co2flux_umolm2s_mean), colour = "blue", na.rm = TRUE)+
ggbreak::scale_x_break(c(ymd("2020-04-01"), ymd("2024-05-30")))+
scale_x_date(date_breaks = "6 months", date_labels = "%Y-%m")
ggplot()+
geom_point(data=targets_df2, aes(x=as.Date(newdate), y= co2flux_umolm2s_mean), colour = "red")+
geom_point(data=targets_with_stable_mean, aes(x=as.Date(newdate), y= co2flux_umolm2s_mean), colour = "blue", na.rm = TRUE)
ggplot()+
geom_point(data=targets_df2, aes(x=datetime, y= ch4flux_umolm2s_mean), colour = "red")+
geom_point(data=targets_with_stable_mean, aes(x=datetime, y= ch4flux_umolm2s_mean), colour = "blue")
ggplot()+
geom_point(data=targets_df2, aes(x=as.Date(newdate), y= co2flux_umolm2s_mean), colour = "red")+
geom_point(data=targets_with_stable_mean, aes(x=as.Date(newdate), y= co2flux_umolm2s_mean), colour = "blue")
ggplot()+
geom_point(data=targets_df2, aes(x=datetime, y= ch4flux_umolm2s_mean), colour = "red")+
geom_point(data=targets_with_stable_mean, aes(x=datetime, y= ch4flux_umolm2s_mean), colour = "blue")
ggplot()+
geom_point(data=targets_df2, aes(x=newdate, y= ch4flux_umolm2s_mean), colour = "red")+
geom_point(data=targets_with_stable_mean, aes(x=newdate, y= ch4flux_umolm2s_mean), colour = "blue")
ggplot()+
geom_point(data=targets_df2, aes(x=as.Date(newdate), y= ch4flux_umolm2s_mean), colour = "red")+
geom_point(data=targets_with_stable_mean, aes(x=as.Date(newdate), y= ch4flux_umolm2s_mean), colour = "blue")
ggplot()+
geom_point(data=targets_df2, aes(x=as.Date(newdate), y= co2flux_umolm2s_mean), colour = "red")+
geom_point(data=targets_with_stable_mean, aes(x=as.Date(newdate), y= co2flux_umolm2s_mean), colour = "blue")
View(targets_df2)
library(Ecdat)
install.packages("Ecdat")
library(plotly)
library(plotly)
targets_df2 <- targets_df2 |> pivot_longer(names_to = "variable", values_to = "observation")
targets_df2 <- targets_df2 |> pivot_longer(cols = starts_with("ch4", "co2"), names_to = "variable", values_to = "observation")
targets_df2 <- targets_df2 |> pivot_longer(cols = starts_with(c("ch4", "co2")), names_to = "variable", values_to = "observation")
View(targets_df2)
targets_with_stable_mean <- targets_with_stable_mean |> pivot_longer(cols = starts_with(c("ch4", "co2")), names_to = "variable", values_to = "observation")
targets_with_stable_mean |> plot_ly(x= ~datetime, y=~variable,
hoverinfo = "text") |>
highlight(selectize = TRUE)
targets_with_stable_mean |> plot_ly(x= ~datetime, y=~variable)
library(crosstalk)
plotly_play <- SharedData$new(targets_with_stable_mean,
key = variable, group = 'variable')
plotly_play <- SharedData$new(targets_with_stable_mean,
key = ~variable, group = 'variable')
targets_with_stable_mean |> plot_ly(x= ~datetime, y=~variable)
plotly_play |> plot_ly(x= ~datetime, y=~variable)
plotly_play <- SharedData$new(targets_with_stable_mean,
key = ~site_id, group = 'variable')
plotly_play |> plot_ly(x= ~datetime, y=~variable)
plotly_play |> plot_ly(x= ~datetime, y=~observation)
plotly_play |> plot_ly(x= ~datetime, y=~observation,
hoverinfo = "text",
text = ~site_id) %>%
highlight(selectize = TRUE)
plotly_play <- SharedData$new(targets_with_stable_mean,
key = ~variable, group = 'variable')
plotly_play |> plot_ly(x= ~datetime, y=~observation,
hoverinfo = "text",
text = ~site_id) %>%
highlight(selectize = TRUE)
plotly_play |> plot_ly(x= ~datetime, y=~observation,
hoverinfo = "text",
text = ~observation) %>%
highlight(selectize = TRUE)
View(targets_with_stable_mean)
scatterplot <- targets_with_stable_mean |>
plot_ly(x= ~datetime, y=~observation) |>
add_markers()
scatterplot
scatterplot <- targets_with_stable_mean |>
plot_ly(x= ~datetime, y=~observation,
hoverinfo = "text",
text = ~observation) %>%
highlight(selectize = TRUE)) |>
scatterplot <- targets_with_stable_mean |>
plot_ly(x= ~datetime, y=~observation,
hoverinfo = "text",
text = ~observation) %>%
highlight(selectize = TRUE)|>
add_markers()
scatterplot
scatterplot <- targets_with_stable_mean |>
plot_ly(x= ~datetime, y=~observation, color = ~variable
hoverinfo = "text",
scatterplot <- targets_with_stable_mean |>
plot_ly(x= ~datetime, y=~observation, color = ~variable,
hoverinfo = "text",
text = ~observation) %>%
highlight(selectize = TRUE)|>
add_markers()
scatterplot
bscols(widths = c(3),
filter_checkbox(id = "variable",
label = "Variable",
sharedData = targets_with_stable_mean,
group = ~variable),
scatterplot)
targets_with_stable_mean %>%
plot_ly(x=~datetime, y=~observation) %>%
add_markers()
targets_with_stable_mean %>%
plot_ly(x=~newdate, y=~observation) %>%
add_markers()
View(targets_with_stable_mean)
#Customize the shape and size of markers
targets_with_stable_mean %>%
plot_ly(x=~newdate, y=~observation) %>%
add_markers(list(symbol = "diamond", size = 10))
#Customize the shape and size of markers
targets_with_stable_mean %>%
plot_ly(x=~newdate, y=~observation) %>%
add_markers(marker = list(symbol = "diamond", size = 10))
#Customize the shape and size of markers
targets_with_stable_mean %>%
plot_ly(x=~newdate, y=~observation) %>%
add_markers(marker = list(symbol = "diamond", size = 5))
#Customize the shape and size of markers
targets_with_stable_mean %>%
plot_ly(x=~newdate, y=~observation) %>%
add_markers(marker = list(symbol = "diamond", size = 15))
#PLAYING WITH PLOTLY
#Begin with a simple scatterplot
targets_with_stable_mean %>%
plot_ly(x=~datetime, y=~observation) %>%
add_markers()
#Customize the shape and size of markers
targets_with_stable_mean %>%
plot_ly(x=~datetime, y=~observation) %>%
add_markers(marker = list(symbol = "diamond", size = 15))
#Customize the shape and size of markers
targets_with_stable_mean %>%
plot_ly(x=~datetime, y=~observation) %>%
add_markers(marker = list(symbol = "diamond", size = 5))
#Customize the shape and size of markers
targets_with_stable_mean %>%
plot_ly(x=~datetime, y=~observation, color = ~variable) %>%
add_markers(marker = list(symbol = "diamond", size = 5, colors = 'orange'))
#Customize the shape and size of markers
targets_with_stable_mean %>%
plot_ly(x=~datetime, y=~observation, symbol = ~variable) %>%
add_markers(marker = list(size = 5))
#Add hovers and text displayed
targets_with_stable_mean %>%
plot_ly(x=~datetime, y=~observation, text = ~variable) %>%
add_markers() %>%
layout(hoverlabel = list(font=list(size=30)))
#Add hovers and text displayed
targets_with_stable_mean %>%
plot_ly(x=~datetime, y=~observation, text = ~variable) %>%
add_markers() %>%
layout(hoverlabel = list(font=list(size=10)))
#Customize the information on hovers and text displayed
targets_with_stable_mean %>%
plot_ly(x=~datetime, y=~observation, hoverlabel = "text",
text = ~paste("datetime:",datetime,"<br>",
"observation:",observation,"<br>",
"variable:",variable,"<br>")) %>%
add_markers() %>%
layout(hoverlabel = list(font=list(size=10)))
#Customize the information on hovers and text displayed
targets_with_stable_mean %>%
plot_ly(x=~datetime, y=~observation, hoverinfo = "text",
text = ~paste("datetime:",datetime,"<br>",
"observation:",observation,"<br>",
"variable:",variable,"<br>")) %>%
add_markers() %>%
layout(hoverlabel = list(font=list(size=10)))
#Add a regression line
m <- lm(observation ~ datetime, data = targets_with_stable_mean)
targets_with_stable_mean %>% select(datetime, observation, variable) %>%
na.omit() %>%
plot_ly(x=~datetime, y=~observation, hoverinfo = "text",
text = ~paste("datetime:",datetime,"<br>",
"observation:",observation,"<br>",
"variable:",variable,"<br>")) %>%
add_markers(show.legend = FALSE) %>%
add_lines(y=~fitted(m))
targets_with_stable_mean %>% select(datetime, observation, variable) %>%
na.omit() %>%
plot_ly(x=~datetime, y=~observation, hoverinfo = "text",
text = ~paste("datetime:",datetime,"<br>",
"observation:",observation,"<br>",
"variable:",variable,"<br>")) %>%
add_markers(showlegend = FALSE) %>%
add_lines(y=~fitted(m))
#Add a regression line
m <- lm(observation ~ datetime, data = targets_with_stable_mean)
targets_with_stable_mean %>% select(datetime, observation, variable) %>%
na.omit() %>%
plot_ly(x=~datetime, y=~observation, hoverinfo = "text",
text = ~paste("datetime:",datetime,"<br>",
"observation:",observation,"<br>",
"variable:",variable,"<br>")) %>%
add_markers(showlegend = FALSE) %>%
add_lines(y=~fitted(m))
